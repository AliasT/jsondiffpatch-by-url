{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","defaults","baseURL","diff","jsondiffpatch","App","leftRef","React","createRef","state","leftJson","rightJson","left","right","handleButtonClick","id","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","event","_ref2","data","wrap","_context","prev","next","get","document","getElementById","value","sent","_this","setState","defineProperty","concat","delta","innerHTML","html","format","stop","_x","apply","this","arguments","handle","e","target","console","log","react_default","createElement","className","style","width","onChange","type","placeholder","aria-label","aria-describedby","onClick","border","react_codemirror2","ref","options","mode","json","JSON","stringify","borderWidth","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7b9d545.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\"\nimport logo from \"./logo.svg\"\nimport * as jsondiffpatch from \"jsondiffpatch\"\nimport \"jsondiffpatch/dist/formatters-styles/html.css\"\nimport axios from \"axios\"\nimport { Controlled as CodeMirror } from \"react-codemirror2\"\nimport \"codemirror/lib/codemirror.css\"\nimport \"codemirror/mode/javascript/javascript\"\nimport \"./App.css\"\n\naxios.defaults.baseURL = \"https://testcourseapidev1.xiaoma.cn\"\n\nconst diff = jsondiffpatch.create({})\n\nclass App extends Component {\n  leftRef = React.createRef()\n  state = {\n    leftJson: \"\",\n    rightJson: \"\",\n    left:\n      \"https://courseapi.xiaoma.cn/api/community/compose/get-all-compose-list?type=hot&page=1&pageSize=20\",\n    right: \"\"\n  }\n\n  handleButtonClick = id => async event => {\n    const { data } = await axios.get(document.getElementById(id).value)\n    this.setState(\n      {\n        [`${id}Json`]: data\n      },\n      () => {\n        if (this.state.left && this.state.right) {\n          const delta = diff.diff(this.state.leftJson, this.state.rightJson)\n          document.getElementById(\n            \"visual\"\n          ).innerHTML = jsondiffpatch.formatters.html.format(\n            delta,\n            this.state.leftJson\n          )\n        }\n      }\n    )\n  }\n\n  handle = id => e => {\n    this.setState({\n      [id]: e.target.value\n    })\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\" style={{ width: \"50%\" }}>\n              <h2>Left</h2>\n              <div className=\"input-group mb-3\">\n                <input\n                  value={this.state.left}\n                  onChange={this.handle(\"left\")}\n                  id=\"left\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Recipient's username\"\n                  aria-label=\"Recipient's username\"\n                  aria-describedby=\"basic-addon2\"\n                />\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    onClick={this.handleButtonClick(\"left\")}\n                    type=\"button\"\n                  >\n                    Button\n                  </button>\n                </div>\n              </div>\n              <div\n                className=\"json-output\"\n                style={{ border: \"solid #ccc 1px \" }}\n              >\n                <CodeMirror\n                  ref={this.leftRef}\n                  options={{\n                    mode: \"javascript\",\n                    json: true\n                  }}\n                  aria-label=\"With CodeMirror\"\n                  value={JSON.stringify(this.state.leftJson, null, 2)}\n                />\n              </div>\n            </div>\n            <div className=\"col\" style={{ width: \"50%\" }}>\n              <h2>Right</h2>\n              <div className=\"input-group mb-3\">\n                <input\n                  id=\"right\"\n                  onChange={this.handle(\"right\")}\n                  value={this.state.right}\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Recipient's username\"\n                  aria-label=\"Recipient's username\"\n                  aria-describedby=\"basic-addon2\"\n                />\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                    onClick={this.handleButtonClick(\"right\")}\n                  >\n                    Button\n                  </button>\n                </div>\n              </div>\n              <div\n                className=\"json-output\"\n                style={{ border: \"solid #ccc 1px \" }}\n              >\n                <CodeMirror\n                  options={{\n                    mode: \"javascript\",\n                    json: true\n                  }}\n                  aria-label=\"With CodeMirror\"\n                  value={JSON.stringify(this.state.rightJson, null, 2)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <hr style={{ borderWidth: 4 }} />\n        <div className=\"container\" id=\"visual\" style={{ marginTop: 10 }} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}